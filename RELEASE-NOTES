Outdated, don't read!


The lib uses no global variables, everything is kept in a hd_data_t struct.
As a consequence, you have to pass a pointer to it in nearly all calls to
libhd functions. The actual hardware list is stored in (hd_data_t)->hd.

All interface functions start with "hd_"; the only include file you need is
"hd.h".

Do not free or modify any of the data structures that are created by libhd.
The lib provides special functions starting with "hd_free_" that can be used
to release the allocated memory.

There are specialized probing functions as, e.g. hd_disk_list() (returns a
list of all disk devices). These functions have a flag to indicate whether
they should re-scan the hardware or not.

As a general rule, the data is represented as lists, not arrays.

The lib supports quite a lot of probing flags that control directly the
probing modules. They are consistently named pr_<module_name> resp.
pr_<module_name>_<feature>. E.g. pr_pci & pr_pci_range.

There is a group of functions named hd_*probe_feature() that should be used
to manipulate the probing flags. As that can be rather tedious, there are
flags defined with a special meaning: pr_all & pr_default. pr_all turns
on everything, pr_default the useful & more or less save features.

Note: you *must set* some probing features before calling hd_scan(), otherwise
nothing is done!

To do a re-scan of the hardware, simply set the features you want to
re-probe and call hd_scan() again. (Hint: you can reset all probing flags by
calling hd_clear_probe_feature(, pr_all); cf. hw.c for an example.)
