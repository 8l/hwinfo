#! /usr/bin/perl

sub addr2line;

$bin = shift;

die "usage: mci binary data_file\n" unless -f($bin) && @ARGV == 1;

while(<>) {
  @i = split;

  die "oops, format error" if @i > 3;

  if(@i == 1) {
    if($i[0] =~ /^>(\S+)/) {
      unshift @funcs, $1
    }
    elsif($i[0] =~ /<(\S+)/) {
     if($funcs[0] eq $1) {
       shift @funcs
     }
     else {
       die "oops, strange data (line $.)\n"
     }
    }
    else {
       die "oops, format error"
    }
  }
  else {
    $func = $i[0];
    $addr = $i[1];
    $size = undef;
    $size = @i == 2 ? undef : $i[2];

    if(defined $size) {
      if(exists $mem{$addr}) {
        $x = addr2line $func;
        $y = addr2line ${$mem{$addr}}[1];
        print "malloc oops (line $.): mem $addr; old: $y, size ${$mem{$addr}}[0]; new: $x, size $size\n";
      }
      $mem{$addr} = [ $size, $func, @funcs ];
    }
    else {
      if(!exists $mem{$addr}) {
        print "free oops (line $.): $addr\n";
      }
      delete $mem{$addr};
    }
  }
}

for (sort keys %mem) {
  $total += ${$mem{$_}}[0];
  $cnt++;
  $x = `addr2line -s -e $bin ${$mem{$_}}[1]`;
  chomp $x;
  $x = $x =~ /\?{2}/ ? undef : "$x ";

  print "$_\t${$mem{$_}}[0]\t";
  $first = 1;
  for $f (@{$mem{$_}}[1..$#{$mem{$_}}]) {
    print "<-" unless $first;
    $first = 0; 
    print addr2line $f;
  }
  print "\n"
}

printf "total: %u bytes in %u blocks\n", $total, $cnt;


sub addr2line
{
  my ($x);

  $x = `addr2line -s -e $bin $_[0]`;
  chomp $x;
  $x = $x =~ /\?{2}/ ? $_[0] : $x;

  return $x;
}

